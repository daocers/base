package ${mainPkg}.controller;

import ${rootPkg}.framework.dao.PageInfo;
import ${rootPkg}.framework.util.JsonUtil;
import ${mainPkg}.model.${className};
import ${mainPkg}.service.I${className}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller("${variableName}")
@RequestMapping("/${variableName}")
public class ${className}Controller {
    @Autowired
    I${className}Service ${variableName}Service;

    private static Logger logger = LoggerFactory.getLogger(${className}Controller.class);

    /**
    * 列表，分页显示
    * @param ${variableName}  查询数据
    * @param curPage 当前页码，从1开始
    * @param showCount 当前页码显示数目
    * @param model
    * @return
    */
    @RequestMapping(value = "/list")
    public String list(${className} ${variableName}, Integer curPage, Integer showCount, ModelMap model){
        try{
            PageInfo<${className}> pageInfo = new PageInfo<>(showCount, curPage);
            pageInfo = ${variableName}Service.findByObject(${variableName}, pageInfo);
            model.put("pi", pageInfo);
            model.put("${variableName}", ${variableName});
        }catch (Exception e){
            logger.error("获取列表失败", e);
            model.put("errMsg", "获取列表失败");
        }
        return "/${variableName}/list";

    }

    /**
    * 查询数据后跳转到对应的编辑页面
    * @param id 查询数据，一般查找id
    * @param model
    * @return
    */
    @RequestMapping(value = "/edit", method = RequestMethod.GET)
    public String toEdit(Integer id, ModelMap model){
        try{
            if(id != null){
                ${className} ${variableName} = ${variableName}Service.findById(id);
                model.put("${variableName}", ${variableName});
            }
        }catch (Exception e){
            logger.error("获取信息失败", e);
            model.put("errMsg", "获取信息失败");
        }
        return "/${variableName}/edit";
    }

    /**
    * 保存结果，根据是否带有id来表示更新或者新增
    * @param ${variableName}
    * @param model
    * @return
    */
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    public String save(${className} ${variableName}, ModelMap model){
        try{
            if(${variableName}.getId() == null){
                ${variableName}Service.save(${variableName});
            }else{
                ${variableName}Service.updateById(${variableName});
            }
        }catch (Exception e){
            logger.error("保存失败", e);
            model.put("${variableName}", ${variableName});
            model.put("errMsg", "保存失败");
            return "${variableName}/edit";
        }
        return "redirect:list.do";
    }

    /**
    * 异步请求 获取全部
    * @param ${variableName} 查询条件
    * @return
    */
    @RequestMapping(value = "/listAll")
    @ResponseBody
    public String listAll(${className} ${variableName}){
        try{
            List<${className}> list = ${variableName}Service.findAllByObject(${variableName});
            return JsonUtil.toJsonString(list);
        }catch (Exception e){
            logger.error("获取全部列表失败", e);
            return "-1";
        }
    }

    /**
    * 异步请求 删除
    * @param ${variableName} id
    * @return
    */
    @RequestMapping(value = "/delete", method = RequestMethod.POST)
    @ResponseBody
    public String delete(${className} ${variableName}){
        try{
            ${variableName}Service.delete(${variableName});
            return "0";
        }catch (Exception e){
            logger.error("删除失败", e);
            return "-1";
        }
    }
}
